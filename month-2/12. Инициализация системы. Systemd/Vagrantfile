# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
  :ubuntuX => {
        :box_name => "generic/ubuntu2204",
        :vm_name => "ubuntuX",
        :net => [
           ["192.168.11.200",  2, "255.255.255.0", "mynet"],
        ]
  },
  :ubuntuZ => {
        :box_name => "generic/ubuntu2204",
        :vm_name => "ubuntuZ",
        :net => [
           ["192.168.11.210",  2, "255.255.255.0", "mynet"],
        ]
  }
}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|

    config.vm.define boxname do |box|
   
      box.vm.box = boxconfig[:box_name]
      box.vm.host_name = boxconfig[:vm_name]
      
      box.vm.provider "virtualbox" do |v|
        v.memory = 768
        v.cpus = 1
       end

      boxconfig[:net].each do |ipconf|
        box.vm.network "private_network", ip: ipconf[0]
      end

      if boxconfig.key?(:public)
        box.vm.network "public_network", boxconfig[:public]
      end
      
      if boxconfig[:vm_name] == "ubuntuX"
        box.vm.provision "shell", inline: <<-SHELL
          cat >> /opt/watchlog.sh << 'EOF'
#!/bin/bash
      
WORD=$1
LOG=$2
DATE=$(date)
      
if grep $WORD $LOG &> /dev/null; then
  logger "$DATE: I found word, Master!"
else
  exit 0
fi
EOF

          cat >> /etc/default/watchlog << 'EOF'
# Configuration file for my watchlog service
# Place it to /etc/default

# File and word in that file that we will be monit
WORD="ALERT"
LOG=/var/log/watchlog.log
EOF
          chmod +x /opt/watchlog.sh

          cat >> /var/log/watchlog.log << EOF
ALERT HELLO WORLD!
ALERT HELLO WORLD_2!
ALERT HELLO WORLD_3!
ALERT HELLO WORLD_4!
EOF
      
          cat >> /etc/systemd/system/watchlog.service << 'EOF'
[Unit]
Description=My watchlog service

[Service]
Type=oneshot
EnvironmentFile=/etc/default/watchlog
ExecStart=/opt/watchlog.sh $WORD $LOG
EOF

          cat >> /etc/systemd/system/watchlog.timer << 'EOF'
[Unit]
Description=Run watchlog script every 30 second

[Timer]
# Run every 30 second
OnUnitActiveSec=30
Unit=watchlog.service

[Install]
WantedBy=multi-user.target
EOF
          systemctl daemon-reload
          systemctl start watchlog.timer
          systemctl start watchlog.service
      SHELL
    else
        box.vm.provision "shell", inline: <<-SHELL
          apt-get update
          apt-get install spawn-fcgi php php-cgi php-cli apache2 libapache2-mod-fcgid -y
          mkdir -p /etc/spawn-fcgi
          cat >> /etc/spawn-fcgi/fcgi.conf << 'EOF'
# You must set some working options before the "spawn-fcgi" service will work.
# If SOCKET points to a file, then this file is cleaned up by the init script.
#
# See spawn-fcgi(1) for all possible options.
#
# Example :
SOCKET=/var/run/php-fcgi.sock
OPTIONS="-u www-data -g www-data -s $SOCKET -S -M 0600 -C 32 -F 1 -- /usr/bin/php-cgi"
EOF
          cat >> /etc/systemd/system/spawn-fcgi.service << 'EOF'
[Unit]
Description=Spawn-fcgi startup service by Otus
After=network.target

[Service]
Type=simple
PIDFile=/var/run/spawn-fcgi.pid
EnvironmentFile=/etc/spawn-fcgi/fcgi.conf
ExecStart=/usr/bin/spawn-fcgi -n $OPTIONS
KillMode=process

[Install]
WantedBy=multi-user.target
EOF
          systemctl daemon-reload
          systemctl start spawn-fcgi.service
          systemctl enable spawn-fcgi.service

          apt-get install -y nginx
          cat >> /etc/systemd/system/nginx@.service << 'EOF'

# Stop dance for nginx
# =======================
#
# ExecStop sends SIGSTOP (graceful stop) to the nginx process.
# If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control
# and sends SIGTERM (fast shutdown) to the main process.
# After another 5s (TimeoutStopSec=5), and if nginx is alive, systemd sends
# SIGKILL to all the remaining processes in the process group (KillMode=mixed).
#
# nginx signals reference doc:
# http://nginx.org/en/docs/control.html
#
[Unit]
Description=A high performance web server and a reverse proxy server
Documentation=man:nginx(8)
After=network.target nss-lookup.target

[Service]
Type=forking
PIDFile=/run/nginx-%I.pid
ExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx-%I.conf -q -g 'daemon on; master_process on;'
ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx-%I.conf -g 'daemon on; master_process on;'
ExecReload=/usr/sbin/nginx -c /etc/nginx/nginx-%I.conf -g 'daemon on; master_process on;' -s reload
ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx-%I.pid
TimeoutStopSec=5
KillMode=mixed

[Install]
WantedBy=multi-user.target
EOF
          cp /etc/nginx/nginx.conf /etc/nginx/nginx-first.conf
          cp /etc/nginx/nginx.conf /etc/nginx/nginx-second.conf

          ls -la /etc/nginx/nginx*.conf
          echo $SHELL
          whoami
          sed --version

          sed -i 's/pid \\/run\\/nginx\\.pid;/pid \\/run\\/nginx-first\\.pid;/g' /etc/nginx/nginx-first.conf
          sed -i 's/pid \\/run\\/nginx\\.pid;/pid \\/run\\/nginx-second\\.pid;/g' /etc/nginx/nginx-second.conf
          sed -i 's/include \\/etc\\/nginx\\/sites-enabled\\/\\*;/#include \\/etc\\/nginx\\/sites-enabled\\/\\*;/g' /etc/nginx/nginx-first.conf
          sed -i 's/include \\/etc\\/nginx\\/sites-enabled\\/\\*;/#include \\/etc\\/nginx\\/sites-enabled\\/\\*;/g' /etc/nginx/nginx-second.conf
          sed -i '/include \\/etc\\/nginx\\/conf\\.d\\/\\*\.conf;/a \
          server {\
              listen 9001;\
          }' /etc/nginx/nginx-first.conf
          sed -i '/include \\/etc\\/nginx\\/conf\\.d\\/\\*\\.conf;/a \
          server {\
              listen 9002;\
          }' /etc/nginx/nginx-second.conf
          
          cat /etc/nginx/nginx-first.conf
          cat /etc/nginx/nginx-second.conf

          systemctl daemon-reload
          systemctl start nginx@first
          systemctl start nginx@second
        SHELL
      end
    end
  end
end